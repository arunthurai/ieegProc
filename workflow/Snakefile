from os import listdir,makedirs,walk
from os.path import join,isdir,dirname,split,abspath,exists
import pandas as pd
from glob import glob
from shutil import copyfile
from snakemake.utils import validate

configfile: 'config/config.yml'
validate(config, "schemas/config.schema.yml")

if not exists(join(config['out_dir'],'logs')):
    makedirs(join(config['out_dir'],'logs'))

subjects = [x.split('-')[1] for x in listdir(config['dicom_dir']) if isdir(join(config['dicom_dir'], x))]

#this include is for the bids() function, and 
#and any other global function declarations
include: 'rules/common.smk'

rule all:
    input:
        reg_vis = expand(bids(root=join(config['out_dir'],'qc'),subject='{subject}',suffix='regqc.png',from_='subject', to='{template}',desc='{desc}'),
                subject=subjects, desc=['affine','SyN'],template=config['template']),
        #electrode_vis = expand(bids(root=join(config['out_dir'],'qc'),subject='{subject}',suffix='electrodevis.png',desc='{desc}',space='{template}'),
        #        subject=subjects, desc=['affine'],template=config['template']),
        probseg_vis = expand(bids(root=join(config['out_dir'],'qc'),subject='{subject}',suffix='probseg.png', desc='atropos3seg'),
                subject=subjects ),
        atlas_vis = expand(bids(root=join(config['out_dir'],'qc'),subject='{subject}',suffix='dseg.png',atlas='{atlas}', from_='{template}'),
                subject=subjects, atlas=config['atlases'],template=config['template']),
        #tsv = expand(bids(root=join(config['out_dir'],'results'),subject='{subject}',suffix='electrodes.tsv',atlas='{atlas}',desc='dilated',from_='{template}'),
        #        subject=subjects, atlas=config['atlases'],template=config['template']),
        #results = [join(config['out_dir'],'results.tar'), join(config['out_dir'],'results_tsv_only.tar')]
                
#rule tar_results:
#    input:
#        tsv = expand(bids(root=join(config['out_dir'],'results'),subject='{subject}',suffix='electrodes.tsv',atlas='{atlas}',desc='dilated',from_='{template}'),
#                subject=subjects, atlas=config['atlases'],template=config['template']),
#        dseg_nii = expand(bids(root=join(config['out_dir'],'results'),subject='{subject}',suffix='dseg.nii.gz',desc='dilated',atlas='{atlas}',from_='{template}',reg='SyN'),
#                subject=subjects, atlas=config['atlases'],template=config['template']),
#        tissue_seg = expand(bids(root=join(config['out_dir'],'results'),subject='{subject}',suffix='probseg.nii.gz',label='{tissue}',desc='atropos3seg'),
#                            tissue=config['tissue_labels'],subject=subjects),
#        t1w = expand(bids(root=join(config['out_dir'],'results'),subject='{subject}',suffix='T1w.nii.gz',from_='atropos3seg',desc='masked'),
#                    subject=subjects)
#
#    output: join(config['out_dir'],'results.tar')
#    shell: 'tar -cvf {output} {input}'
#
#rule tar_tsv_only:
#    input:
#        tsv = expand(bids(root=join(config['out_dir'],'results'),subject='{subject}',suffix='electrodes.tsv',atlas='{atlas}',desc='dilated',from_='{template}'),
#                subject=subjects, atlas=config['atlases'],template=config['template']),
#    output: join(config['out_dir'],'results_tsv_only.tar')
#    shell: 'tar -cvf {output} {input}'

include: 'rules/dicom2bids.smk'
include: "rules/registration.smk"
include: "rules/segmentation.smk"
#include: "rules/electrodes.smk"
include: "rules/visqc.smk"
